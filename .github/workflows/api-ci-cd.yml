name: API CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/api/**'
      - 'tests/**'
      - 'config/environment_api_*.yml'
      - '.github/workflows/api-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/api/**'
      - 'tests/**'
      - 'config/environment_api_*.yml'
      - '.github/workflows/api-ci-cd.yml'

env:
  ACTIONS_RUNNER_DEBUG: 'true' #enable detailed logging
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/api/' 

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install Miniconda
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        source "$HOME/miniconda/etc/profile.d/conda.sh"
        conda init
        conda config --set always_yes yes --set changeps1 no
        conda update -q conda
    - name: Install additional Python dependencies for the API
      run: |
        conda env create -f config/environment_api_local.yml
        conda run -n instagram-topic-classifier-api pip install pytest-cov
    - name: Create .env for testing
      run: cp .env.example .env
    - name: Run tests with coverage
      run: |
        conda run -n instagram-topic-classifier-api bash scripts/run_tests_with_coverage.sh api
    - name: Store coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-api
        path: coverage.xml
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.xml', 'utf8');
          const percentage = coverage.match(/line-rate="([\d.]+)"/)[1];
          const coveragePercentage = (parseFloat(percentage) * 100).toFixed(2);
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸ“Š API Coverage: ${coveragePercentage}%`
          })

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: 
      name: 'Production'
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}
    # if: ${{ github.ref == 'refs/heads/main' && (contains(github.event.head_commit.message, 'config/host.json') || contains(github.event.head_commit.message, 'src/api/function_app.py') || contains(github.event.head_commit.message, 'config/environment_api_azure.yml') || contains(github.event.head_commit.message, 'config/requirements.txt')) }}
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 'Grab requirements.txt'
      run: cp config/requirements.txt ./src/api/

    - name: 'Create .env'
      run: |
        touch ./src/api/.env
        echo "MODEL_ENDPOINT_URL=${{ secrets.MODEL_ENDPOINT_URL }}" >> ./src/api/.env
        echo "MODEL_KEY=${{ secrets.MODEL_KEY }}" >> ./src/api/.env

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      id: deploy-to-function
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
        scm-do-build-during-deployment: true
        enable-oryx-build: true
